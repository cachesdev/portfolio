// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "chipa.me/views/layouts"

// I need to do some apply directives to the .chroma class
func BlogEntry(model BlogEntryModel) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"grid md:grid-cols-12 gap-8 pt-8 mb-8\"><div class=\"font-poppins col-span-12 md:col-span-9 prose prose-lg max-w-none\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(model.Post).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><div id=\"toc\" class=\"md:block hidden font-poppins prose prose-li:list-none prose-ul:my-0 prose-ul:px-1 prose-a:no-underline prose-li:my-0 sticky col-span-3 top-12 max-h-[calc(100vh-250px)]\"><div class=\"text-2xl text-warning\">on this page</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.Raw(model.Toc).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n\t\t\t\t\tonloadAdd(_ => {\n\t\t\t\t\tlet tocItems = any('li a', me('#toc'));\n\t\t\t\t\tlet sections = any('h1, h2, h3, h4, h5, h6');\n\t\t\t\t\t\n\t\t\t\t\t// Helper function to get the current section\n\t\t\t\t\tfunction getCurrentSection() {\n\t\t\t\t\t\tlet currentSection;\n\t\t\t\t\t\tsections.forEach(section => {\n\t\t\t\t\t\tlet sectionTop = section.offsetTop;\n\t\t\t\t\t\tlet sectionHeight = section.clientHeight;\n\t\t\t\t\t\tif (window.scrollY >= sectionTop - sectionHeight / 3) {\n\t\t\t\t\t\t\tcurrentSection = section;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn currentSection;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Function to update TOC highlighting\n\t\t\t\t\tfunction updateTOC() {\n\t\t\t\t\t\tlet currentSection = getCurrentSection();\n\t\t\t\t\t\tif (!currentSection) return;\n\n\t\t\t\t\t\ttocItems.forEach(item => {\n\t\t\t\t\t\t// TODO: Could be better\n\t\t\t\t\t\titem.addClass('transition-all')\n\t\t\t\t\t\titem.addClass('duration-100')\n\t\t\t\t\t\titem.addClass('text-sm')\n\t\t\t\t\t\tlet href = item.getAttribute('href');\n\t\t\t\t\t\tlet isActive = href === `#${currentSection.id}`;\n\t\t\t\t\t\titem.classToggleList('text-orange-400 dark:text-primary text-md font-bold', isActive);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update on scroll with debounce for performance\n\t\t\t\t\tlet scrollTimeout;\n\t\t\t\t\twindow.addEventListener('scroll', _ => {\n\t\t\t\t\t\tif (scrollTimeout) {\n\t\t\t\t\t\twindow.cancelAnimationFrame(scrollTimeout);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscrollTimeout = window.requestAnimationFrame(_ => {\n\t\t\t\t\t\tupdateTOC();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\t// Initial update\n\t\t\t\t\tupdateTOC();\n\t\t\t\t\t});\n\t\t\t\t</script></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layouts.Base(model.Title).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
